// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quick_Tickets.Data;

#nullable disable

namespace Quick_Tickets.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250227001900_updateValidation")]
    partial class updateValidation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex(new[] { "ActorId" }, "IX_actorMovies_ActorId");

                    b.ToTable("actorMovies", (string)null);
                });

            modelBuilder.Entity("Quick_Tickets.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("News")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("actors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Main character in Naruto",
                            FirstName = "Naruto",
                            LastName = "Uzumaki",
                            News = "Became Hokage",
                            ProfilePicture = "naruto.png"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Main character in Dragon Ball",
                            FirstName = "Goku",
                            LastName = "Son",
                            News = "Defeated Jiren",
                            ProfilePicture = "goku.png"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Hollywood action star",
                            FirstName = "Keanu",
                            LastName = "Reeves",
                            News = "John Wick star",
                            ProfilePicture = "keanu.png"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Horror actress",
                            FirstName = "Vera",
                            LastName = "Farmiga",
                            News = "The Conjuring series star",
                            ProfilePicture = "vera.png"
                        });
                });

            modelBuilder.Entity("Quick_Tickets.Models.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 2
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("Quick_Tickets.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Animated movies with Japanese style",
                            Name = "Anime"
                        },
                        new
                        {
                            Id = 2,
                            Description = "High-intensity movies with fights and explosions",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Scary movies with supernatural and thrilling elements",
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("Quick_Tickets.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CinemaLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CinemaPhonto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("cinemas", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Downtown",
                            CinemaLogo = "cinema_max.png",
                            CinemaPhonto = "1.png",
                            Description = "Best action movies",
                            Name = "Cinema Max"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Main Street",
                            CinemaLogo = "horror_hub.png",
                            CinemaPhonto = "2.png",
                            Description = "Scariest horror movies",
                            Name = "Horror Hub"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Tokyo Avenue",
                            CinemaLogo = "anime_world.png",
                            CinemaPhonto = "3.png",
                            Description = "Top anime movies",
                            Name = "Anime World"
                        });
                });

            modelBuilder.Entity("Quick_Tickets.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieStatus")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "IX_movies_CategoryId");

                    b.HasIndex(new[] { "CinemaId" }, "IX_movies_CinemaId");

                    b.ToTable("movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CinemaId = 3,
                            Description = "A great anime movie",
                            EndDate = new DateTime(2025, 3, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5924),
                            ImgUrl = "naruto.jpg",
                            MovieStatus = 1,
                            Name = "Naruto: The Last",
                            Price = 12.99,
                            StartDate = new DateTime(2025, 2, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5872),
                            TrailerUrl = "trailer_naruto.mp4"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CinemaId = 1,
                            Description = "Best action-packed movie",
                            EndDate = new DateTime(2025, 3, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5938),
                            ImgUrl = "johnwick.jpg",
                            MovieStatus = 1,
                            Name = "John Wick",
                            Price = 15.99,
                            StartDate = new DateTime(2025, 2, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5935),
                            TrailerUrl = "trailer_johnwick.mp4"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CinemaId = 2,
                            Description = "A terrifying horror movie",
                            EndDate = new DateTime(2025, 3, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5945),
                            ImgUrl = "conjuring.jpg",
                            MovieStatus = 1,
                            Name = "The Conjuring",
                            Price = 10.99,
                            StartDate = new DateTime(2025, 2, 27, 2, 18, 58, 851, DateTimeKind.Local).AddTicks(5943),
                            TrailerUrl = "trailer_conjuring.mp4"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Quick_Tickets.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quick_Tickets.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quick_Tickets.Models.ActorMovie", b =>
                {
                    b.HasOne("Quick_Tickets.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quick_Tickets.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Quick_Tickets.Models.Movie", b =>
                {
                    b.HasOne("Quick_Tickets.Models.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("Quick_Tickets.Models.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("Quick_Tickets.Models.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Quick_Tickets.Models.Cinema", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
