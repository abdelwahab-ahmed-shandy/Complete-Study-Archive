
---------------------------------------------------------------
| مبدأ المسؤولية الواحدة (Single Responsibility Principle - SRP) :  |
---------------------------------------------------------------

📌 تعريف المبدأ
مبدأ المسؤولية الواحدة (SRP) هو أحد المبادئ الخمسة لمبدأ SOLID في البرمجة الكائنية التوجه (OOP). ينص هذا المبدأ على أن:

"يجب أن يكون لكل كلاس مسؤولية واحدة فقط، أي أنه يجب أن يكون لديه سبب واحد فقط للتغيير."

🔍 ماذا يعني ذلك؟
هذا يعني أنه عندما نقوم بإنشاء كلاس (Class)، يجب أن يكون مسؤولًا عن مهمة واحدة فقط وليس عدة مهام.
إذا كان الكلاس يحتوي على أكثر من مسؤولية، فإنه يصبح معقدًا، صعب الصيانة، وأقل مرونة عند التعديل أو التوسيع.


 
//==========================================================================================================================================
//==========================================================================================================================================

📌 لماذا نحتاج إلى مبدأ المسؤولية الواحدة؟
📍 تخيل هذا السيناريو:

لديك كلاس يسمى Employee يحتوي على:

✔ بيانات الموظف (الاسم، الراتب، الوظيفة، إلخ).
✔ وظائف متعلقة بالراتب (حساب الراتب، الضرائب، الحوافز).
✔ وظائف متعلقة بتخزين البيانات (حفظ بيانات الموظف في قاعدة البيانات).
✔ وظائف متعلقة بالتقارير (تصدير بيانات الموظف إلى ملف PDF).

⚠ ما هي المشكلة هنا؟
هذا الكلاس لديه أكثر من مسؤولية واحدة:

مسؤولية إدارة بيانات الموظف.
مسؤولية حساب الراتب والضرائب.
مسؤولية حفظ البيانات في قاعدة البيانات.
مسؤولية إعداد التقارير.
👉 إذا حدث تغيير في طريقة حساب الضرائب، فسيتأثر الكود المرتبط بتخزين البيانات والتقارير، مما يزيد من التعقيد والتأثير السلبي على النظام.

✍ الحل؟
🔹 تقسيم الكلاس إلى عدة كلاسات بحيث يكون لكل كلاس مسؤولية واحدة فقط.

//==========================================================================================================================================
//==========================================================================================================================================

📌 كيف نطبق مبدأ المسؤولية الواحدة؟
📍 لنُعدِّل كود Employee لتطبيق SRP 👇

❌ قبل تطبيق مبدأ SRP (كود غير صحيح):
----------------------------------------------------
public class Employee
{
    public string Name { get; set; }
    public double Salary { get; set; }

    public void CalculateSalary()
    {
        // حساب الراتب والضرائب
    }

    public void SaveToDatabase()
    {
        // حفظ بيانات الموظف في قاعدة البيانات
    }

    public void GenerateReport()
    {
        // إنشاء تقرير PDF للموظف
    }
}
----------------------------------------------------

⚠ ما هي المشكلة؟

الكلاس يقوم بأكثر من وظيفة (حساب الراتب، حفظ البيانات، إنشاء التقارير).
أي تعديل في أحد هذه الوظائف قد يؤثر على الوظائف الأخرى.


//==========================================================================================================================================
//==========================================================================================================================================

✅ بعد تطبيق مبدأ SRP (كود صحيح ومُنظم):
🔹 نقسم الكود إلى ثلاثة كلاسات منفصلة:
✔ Employee مسؤول فقط عن بيانات الموظف.
✔ SalaryCalculator مسؤول عن حساب الراتب.
✔ EmployeeRepository مسؤول عن التعامل مع قاعدة البيانات.
✔ EmployeeReport مسؤول عن إنشاء التقارير.

--------------------------------------------------------------------------
public class Employee
{
    public string Name { get; set; }
    public double Salary { get; set; }
}

public class SalaryCalculator
{
    public double CalculateSalary(Employee employee)
    {
        // حساب الراتب والضرائب
        return employee.Salary * 0.90; // مثال على خصم الضرائب
    }
}

public class EmployeeRepository
{
    public void SaveToDatabase(Employee employee)
    {
        // حفظ بيانات الموظف في قاعدة البيانات
    }
}

public class EmployeeReport
{
    public void GenerateReport(Employee employee)
    {
        // إنشاء تقرير PDF للموظف
    }
}
--------------------------------------------------------------------------


//==========================================================================================================================================
//==========================================================================================================================================

📌 فوائد تطبيق مبدأ المسؤولية الواحدة
✅ 1. سهولة الصيانة والتعديلات

إذا احتجنا إلى تعديل حساب الراتب، سنقوم بتعديل SalaryCalculator فقط دون التأثير على بقية الكود.
✅ 2. تقليل تعقيد الكود

الكود أكثر وضوحًا، وكل كلاس له مهمة محددة يمكن فهمها بسهولة.
✅ 3. تعزيز القابلية لإعادة الاستخدام

يمكننا إعادة استخدام SalaryCalculator مع أي كلاس آخر يحتاج إلى حساب الراتب.
✅ 4. تحسين قابلية الاختبار (Unit Testing)

يمكننا اختبار كل كلاس على حدة دون الحاجة لاختبار النظام بالكامل.

//==========================================================================================================================================
//==========================================================================================================================================

📌 القاعدة الذهبية لمبدأ المسؤولية الواحدة
"كل كلاس يجب أن يكون مسؤولًا عن مهمة واحدة فقط."

✍ تطبيق هذا المبدأ يجعل الكود أكثر تنظيمًا، أسهل في الصيانة، وأكثر مرونة للتطوير في المستقبل. 🚀