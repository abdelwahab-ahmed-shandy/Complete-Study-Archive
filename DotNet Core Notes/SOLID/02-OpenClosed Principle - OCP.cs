
مبدأ الفتح والإغلاق (Open/Closed Principle - OCP)  :

📌 تعريف المبدأ
مبدأ الفتح والإغلاق (OCP) هو المبدأ الثاني من مبادئ SOLID في البرمجة الكائنية التوجه (OOP)، وينص على:

"يجب أن يكون الكود مفتوحًا للامتداد ولكن مغلقًا للتعديل."

🔍 ماذا يعني ذلك؟
مفتوح للامتداد 👉 يمكننا إضافة ميزات جديدة دون تعديل الكود الموجود.
مغلق للتعديل 👉 لا يجب علينا تغيير الكود الأصلي عند إضافة وظائف جديدة.

//==========================================================================================================================================
//==========================================================================================================================================

📌 لماذا نحتاج إلى مبدأ الفتح والإغلاق؟
📍 تخيل هذا السيناريو:
لديك كلاس لحساب الخصومات على المنتجات، والكود مكتوب بهذه الطريقة 👇

❌ قبل تطبيق مبدأ OCP (كود غير صحيح)

--------------------------------------------------------------------

public class DiscountCalculator
{
    public double CalculateDiscount(string customerType, double price)
    {
        if (customerType == "Regular")
        {
            return price * 0.90; // خصم 10% للعميل العادي
        }
        else if (customerType == "VIP")
        {
            return price * 0.80; // خصم 20% للعميل الـ VIP
        }
        else
        {
            return price; // لا يوجد خصم
        }
    }
}

--------------------------------------------------------------------

⚠ ما هي المشكلة؟

إذا احتجنا إلى إضافة نوع جديد من العملاء (مثل "عميل مميز") مع خصم مختلف، سنضطر إلى تعديل الكود الأصلي وإضافة else if جديدة!
كل مرة نعدل فيها الكود، هناك خطر حدوث أخطاء وتأثير على الكود الموجود مسبقًا.
الكود غير قابل للتوسع بسهولة، مما يؤدي إلى تعقيد غير ضروري.


//==========================================================================================================================================
//==========================================================================================================================================

📌 كيف نطبق مبدأ الفتح والإغلاق؟
📍 لنُعيد كتابة الكود بطريقة صحيحة وفقًا لـ OCP

✅ بعد تطبيق مبدأ OCP (كود صحيح ومُنظم):

بدلًا من التعديل في الكود الأصلي، نقوم بإضافة فئات جديدة (Classes) عند الحاجة.

🔹 استخدام مبدأ "Polymorphism" لإنشاء كلاس أساسي (Discount) وكلاسات فرعية لكل نوع من العملاء.


----------------------------------------------------------------------------------------
// كلاس أساسي يحتوي على دالة لحساب الخصم
public abstract class Discount
{
    public abstract double ApplyDiscount(double price);
}

// كلاس العميل العادي
public class RegularDiscount : Discount
{
    public override double ApplyDiscount(double price)
    {
        return price * 0.90; // خصم 10%
    }
}

// كلاس العميل الـ VIP
public class VIPDiscount : Discount
{
    public override double ApplyDiscount(double price)
    {
        return price * 0.80; // خصم 20%
    }
}

// كلاس العميل المميز
public class PremiumDiscount : Discount
{
    public override double ApplyDiscount(double price)
    {
        return price * 0.75; // خصم 25%
    }
}

// كلاس لحساب الخصم بناءً على نوع العميل
public class DiscountCalculator
{
    public double CalculateDiscount(Discount discount, double price)
    {
        return discount.ApplyDiscount(price);
    }
}
----------------------------------------------------------------------------------------

=================
🔹 استخدام الكود:
=================

----------------------------------------------------------------------------------------
DiscountCalculator calculator = new DiscountCalculator();

double regularPrice = calculator.CalculateDiscount(new RegularDiscount(), 100);
double vipPrice = calculator.CalculateDiscount(new VIPDiscount(), 100);
double premiumPrice = calculator.CalculateDiscount(new PremiumDiscount(), 100);

Console.WriteLine($"Regular Price: {regularPrice}");  // 90
Console.WriteLine($"VIP Price: {vipPrice}");          // 80
Console.WriteLine($"Premium Price: {premiumPrice}");  // 75
----------------------------------------------------------------------------------------


//==========================================================================================================================================
//==========================================================================================================================================

📌 فوائد تطبيق مبدأ الفتح والإغلاق
✅ 1. سهولة التوسع دون تعديل الكود الأصلي

عند الحاجة إلى إضافة نوع جديد من العملاء، يمكننا إضافة كلاس جديد فقط دون تعديل الكود الموجود.
✅ 2. تقليل احتمالية حدوث أخطاء

التعديلات المستمرة على الكود الأصلي قد تؤدي إلى كسر وظائف أخرى، ولكن مع OCP، الكود القديم يبقى كما هو.
✅ 3. تعزيز القابلية لإعادة الاستخدام

الكود يمكن إعادة استخدامه بسهولة لمختلف أنواع الخصومات بدون تعديل.
✅ 4. تحسين الاختبار (Unit Testing)

يمكن اختبار كل نوع خصم بشكل منفصل دون الحاجة لاختبار الكود بالكامل عند كل تعديل.


//==========================================================================================================================================
//==========================================================================================================================================

📌 القاعدة الذهبية لمبدأ الفتح والإغلاق
"لا تعدّل الكود الموجود، بل قم بتوسيعه عند الحاجة."

✍ تطبيق هذا المبدأ يجعل الكود أكثر تنظيمًا، أسهل في التطوير، وأكثر استقرارًا عند إضافة ميزات جديدة. 🚀
