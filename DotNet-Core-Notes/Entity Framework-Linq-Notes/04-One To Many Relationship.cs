/// One To Many :

// ุดุฑุญ ุนูุงูุฉ One To Many ูู ููุงุนุฏ ุงูุจูุงูุงุช
// ุนูุงูุฉ One to Many (ูุงุญุฏ ุฅูู ูุชุนุฏุฏ) ูู ููุน ูู ุงูุนูุงูุงุช ุจูู ุงูุฌุฏุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ุญูุซ ูููู ููู ุณุฌู ูู ุงูุฌุฏูู ุงูุฃูู ุงุฑุชุจุงุท ุจุนุฏุฉ ุณุฌูุงุช ูู ุงูุฌุฏูู ุงูุซุงููุ ุจูููุง ูููู ููู ุณุฌู ูู ุงูุฌุฏูู ุงูุซุงูู ุงุฑุชุจุงุท ุจุณุฌู ูุงุญุฏ ููุท ูู ุงูุฌุฏูู ุงูุฃูู.

//=================================================================================================================================

// ๐ ูุซุงู ุนููู

// ุงูุณููุงุฑูู:
// ูููุชุฑุถ ุฃู ูุฏููุง ูุงุนุฏุฉ ุจูุงูุงุช ูููุชุจุฉุ ููุฏููุง ุฌุฏูููู:
// ุฌุฏูู "ุงููุคูููู" (Authors): ูุญุชูู ุนูู ูุนูููุงุช ุนู ุงููุคูููู.
// ุฌุฏูู "ุงููุชุจ" (Books): ูุญุชูู ุนูู ุงููุชุจ ุงูุชู ูุชุจูุง ุงููุคูููู.

// ุงููุงุนุฏุฉ:
// ูููู ููุคูู ูุงุญุฏ ูุชุงุจุฉ ุนุฏุฉ ูุชุจ.
// ููู ูู ูุชุงุจ ููุชูุจ ุจูุงุณุทุฉ ูุคูู ูุงุญุฏ ููุท.
// ูุฐุง ูุนูู ุฃู ุงูุนูุงูุฉ ุจูู Authors ู Books ูู One to Many.

//=================================================================================================================================

// ููููุฉ ุชูุซูู ุงูุนูุงูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ุจุงุณุชุฎุฏุงู ุงูููุงุชูุญ ุงูุฃุณุงุณูุฉ (Primary Key) ูุงูููุชุงุญ ุงูุฎุงุฑุฌู (Foreign Key)

// One :
public class Author
{
    public int AuthorID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Name { get; set; }
    public ICollection<Book> Books { get; set; } = new List<Book>(); // ุนูุงูุฉ One-To-Many
}

// Many :
public class Book
{
    public int BookID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Title { get; set; }
    public int AuthorID { get; set; }  // ููุชุงุญ ุฎุงุฑุฌู ูุฑุจุท ุงููุชุงุจ ุจุงููุคูู
    public Author Author { get; set; } // ุฎุตูุตุฉ ุงูุชููู
}

//=================================================================================================================================

// ุชูููู ุงูุนูุงูุฉ ุจุงุณุชุฎุฏุงู Fluent API:

public class LibraryContext : DbContext
{
    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=LibraryDB;Trusted_Connection=True;");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Book>()
            .HasOne(b => b.Author)  // ูู ูุชุงุจ ูู ูุคูู ูุงุญุฏ
            .WithMany(a => a.Books) // ูู ูุคูู ูุฏูู ุนุฏุฉ ูุชุจ
            .HasForeignKey(b => b.AuthorID); // ุงูููุชุงุญ ุงูุฎุงุฑุฌู
    }
}

//=================================================================================================================================

// ุฅุฏุฎุงู ุจูุงูุงุช ูุงุฎุชุจุงุฑ ุงูุนูุงูุฉ:
using (var context = new LibraryContext())
{
    var author = new Author { Name = "ูุฌูุจ ูุญููุธ" };
    var book1 = new Book { Title = "ุงูุซูุงุซูุฉ", Author = author };
    var book2 = new Book { Title = "ุงููุต ูุงูููุงุจ", Author = author };

    context.Authors.Add(author);
    context.Books.AddRange(book1, book2);
    context.SaveChanges();
}

//=================================================================================================================================

// ุฌูุจ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู Include:
using (var context = new LibraryContext())
{
    var authorsWithBooks = context.Authors.Include(a => a.Books).ToList();

    foreach (var author in authorsWithBooks)
    {
        Console.WriteLine($"โ๏ธ ุงููุคูู: {author.Name}");
        foreach (var book in author.Books)
        {
            Console.WriteLine($"   ๐ {book.Title}");
        }
    }
}


