 
📌 ما هي Server-Side Validation؟ 

التحقق من صحة البيانات على جانب الخادم (Server-Side Validation) هو عملية التحقق من صحة البيانات المدخلة في الخادم (Server) بعد إرسالها من المستخدم.
يتم ذلك داخل Controller في ASP.NET Core MVC قبل تخزينها في قاعدة البيانات أو تنفيذ أي عمليات أخرى.


🚀 لماذا نحتاج إلى Server-Side Validation؟

✅ الأمان: التحقق من البيانات على الخادم يمنع الهجمات مثل تجاوز التحقق من جهة العميل (Client-Side Bypass).
✅ الموثوقية: المستخدم قد يعطّل التحقق من العميل، لكن التحقق من الخادم يضمن عدم قبول بيانات غير صحيحة.
✅ التأكد من البيانات: يضمن أن البيانات التي يتم تخزينها صحيحة ومتوافقة مع الشروط المطلوبة.

//==========================================================================================================================

🎯 كيفية تطبيق Server-Side Validation في ASP.NET Core MVC

1️ - إنشاء النموذج (Model) مع قيود التحقق :

نستخدم Data Annotations لإضافة قواعد التحقق من البيانات.

--------------------------------------------------------------------------
using System.ComponentModel.DataAnnotations;

public class UserModel
{
    [Required(ErrorMessage = "⚠️ الاسم مطلوب!")]
    [StringLength(50, MinimumLength = 3, ErrorMessage = "⚠️ يجب أن يكون الاسم بين 3 و 50 حرفًا.")]
    public string Name { get; set; }

    [Required(ErrorMessage = "⚠️ البريد الإلكتروني مطلوب!")]
    [EmailAddress(ErrorMessage = "⚠️ البريد الإلكتروني غير صالح!")]
    public string Email { get; set; }

    [Required(ErrorMessage = "⚠️ كلمة المرور مطلوبة!")]
    [MinLength(6, ErrorMessage = "⚠️ يجب أن تكون كلمة المرور 6 أحرف على الأقل.")]
    public string Password { get; set; }

    [Compare("Password", ErrorMessage = "⚠️ كلمتا المرور غير متطابقتين!")]
    public string ConfirmPassword { get; set; }
}
--------------------------------------------------------------------------

//==========================================================================================================================

2️ - إنشاء الـ Controller لإدارة البيانات
يتحقق مما إذا كانت البيانات صحيحة (ModelState.IsValid).
إذا لم تكن البيانات صحيحة، يُعيد النموذج مع الأخطاء.
إذا كانت صحيحة، يمكن حفظها أو تنفيذ أي عملية مطلوبة.

--------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;

public class UserController : Controller
{
    [HttpGet]
    public IActionResult Register()
    {
        return View();
    }

    [HttpPost]
    public IActionResult Register(UserModel model)
    {
        if (ModelState.IsValid) // ✅ التحقق من صحة البيانات
        {
            // 🔹 هنا يمكننا حفظ البيانات أو تنفيذ عمليات أخرى
            return RedirectToAction("Success");
        }

        return View(model); // ❌ إذا كانت هناك أخطاء، يُعيد عرض النموذج مع الأخطاء
    }

    public IActionResult Success()
    {
        return View();
    }
}
--------------------------------------------------------------------------

//==========================================================================================================================

3️ - إنشاء الـ View لعرض النموذج مع الأخطاء :

asp-validation-for يعرض الأخطاء القادمة من الخادم.

إذا أدخل المستخدم بيانات غير صحيحة، سيتم إرجاعه مع رسائل خطأ.

--------------------------------------------------------------------------
@model UserModel

<form asp-action="Register" asp-controller="User" method="post">
    <div>
        <label asp-for="Name"></label>
        <input asp-for="Name" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="Email"></label>
        <input asp-for="Email" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="Password"></label>
        <input asp-for="Password" type="password" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <div>
        <label asp-for="ConfirmPassword"></label>
        <input asp-for="ConfirmPassword" type="password" />
        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
    </div>

    <button type="submit">تسجيل</button>
</form>
--------------------------------------------------------------------------

//==========================================================================================================================
🔥 كيف يعمل التحقق من صحة البيانات على الخادم؟ :

1️ - المستخدم يُدخل البيانات في النموذج.
2️ - عند الضغط على زر الإرسال (Submit)، تُرسل البيانات إلى السيرفر.
3️ - داخل الـ Controller، يقوم ModelState.IsValid بفحص البيانات:

✅ إذا كانت البيانات صحيحة → يتم معالجتها (حفظها، إرسالها، إلخ).
❌ إذا كانت غير صحيحة → يُعاد عرض النموذج مع الأخطاء.

//==========================================================================================================================

💡 متى يتم استخدام Server-Side Validation فقط؟ :

على الرغم من أن التحقق من جانب العميل يوفر تجربة مستخدم أفضل، إلا أنه لا يمكن الاعتماد عليه كمصدر وحيد للآتي:
✅ عندما يكون التطبيق معرضًا للهجمات (مثل تطبيقات تسجيل الدخول والتسجيل).
✅ عند الحاجة إلى التأكد من صحة البيانات بنسبة 100% قبل تخزينها في قاعدة البيانات.
✅ عندما يتم إرسال البيانات من مصادر غير موثوقة مثل واجهات برمجية (APIs) أو طلبات خارجية.


//==========================================================================================================================

📌 ملخص
🔹 Server-Side Validation يضمن أن البيانات المُرسلة صحيحة وآمنة قبل تخزينها أو معالجتها.
🔹 يتم التحقق من البيانات باستخدام Data Annotations و ModelState.IsValid في الـ Controller.
🔹 عند وجود خطأ، يتم إعادة عرض النموذج مع الأخطاء بدلاً من تنفيذ العمليات غير الصحيحة.
🔹 مثال عملي يظهر كيف يتم تنفيذ التحقق على الخادم بشكل عملي في MVC.

🚀 أفضل ممارسة: استخدم التحقق من جهة العميل + جهة الخادم معًا لتحقيق أفضل تجربة وأمان!

//==========================================================================================================================
//==========================================================================================================================
Abdelwahab Shandy
//==========================================================================================================================
//==========================================================================================================================