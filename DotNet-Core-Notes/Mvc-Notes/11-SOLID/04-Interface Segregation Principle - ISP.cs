
📌 مبدأ فصل الواجهات (Interface Segregation Principle - ISP)  :

🔹 تعريف المبدأ
مبدأ فصل الواجهات (ISP - Interface Segregation Principle) هو المبدأ الرابع من مبادئ SOLID، وينص على:

"يجب ألا يكون العملاء (Clients) مجبرين على الاعتماد على واجهات تحتوي على وظائف لا يستخدمونها."

🔍 ماذا يعني ذلك؟
عندما يكون لديك واجهة (Interface) تحتوي على وظائف كثيرة جدًا، قد تجد أن بعض الفئات التي تطبقها تحتاج فقط إلى جزء صغير منها، بينما لا تستخدم بقية الوظائف.

✅ الحل هو تقسيم الواجهة الكبيرة إلى واجهات أصغر بحيث تكون كل واجهة متخصصة في مجموعة محددة من الوظائف، وبهذا يتمكن كل كلاس من تطبيق الواجهة التي يحتاجها فقط.


//==========================================================================================================================================
//==========================================================================================================================================

📌 لماذا نحتاج إلى مبدأ ISP؟
إذا كانت الواجهة ضخمة وتحتوي على وظائف متعددة لا يستخدمها جميع العملاء، فإن الكود سيعاني من المشاكل التالية:

1️⃣ التعديلات ستؤثر على العديد من الفئات

أي تغيير في الواجهة سيؤثر على جميع الفئات التي تطبقها، حتى لو لم تكن بحاجة إلى التغيير.
2️⃣ زيادة التعقيد وعدم الحاجة إلى وظائف غير ضرورية

بعض الفئات ستضطر إلى تنفيذ دوال لا تستخدمها فقط لأنها ملزمة بتطبيق الواجهة.
3️⃣ صعوبة الصيانة والتطوير

كلما زادت الوظائف غير المستخدمة في الواجهة، زادت احتمالية حدوث أخطاء عند تعديل الكود.


//==========================================================================================================================================
//==========================================================================================================================================

📌 مثال على كسر مبدأ ISP (كود غير صحيح)

📍 تصميم خاطئ يحتوي على واجهة ضخمة:

public interface IWorker
{
    void Work();
    void Eat();
}

🔹 الآن لدينا كلاس HumanWorker (عامل بشري) يقوم بتنفيذ جميع الوظائف:

public class HumanWorker : IWorker
{
    public void Work()
    {
        Console.WriteLine("Human is working...");
    }

    public void Eat()
    {
        Console.WriteLine("Human is eating...");
    }
}

🔹 ولكن لدينا أيضًا RobotWorker (روبوت عامل)، وهو لا يحتاج إلى وظيفة Eat() لأنه لا يأكل!

public class RobotWorker : IWorker
{
    public void Work()
    {
        Console.WriteLine("Robot is working...");
    }

    public void Eat()
    {
        throw new NotImplementedException(); // ❌ الروبوت لا يأكل، لكننا مجبرون على تنفيذ هذه الدالة!
    }
}


//==========================================================================================================================================
//==========================================================================================================================================

⚠ المشكلة في هذا التصميم :

🔴 الروبوت لا يحتاج إلى وظيفة Eat()، ولكن الواجهة تجبره على تنفيذها!
🔴 عندما يتم إضافة دالة جديدة إلى IWorker، سيتم إجبار جميع الفئات على تنفيذها، حتى لو لم تكن بحاجة إليها!
🔴 هذا انتهاك واضح لمبدأ ISP لأننا نُجبر الفئات على تنفيذ وظائف لا تحتاجها!


//==========================================================================================================================================
//==========================================================================================================================================

📌 الحل باستخدام مبدأ ISP (كود صحيح ومُنظم) :

📍 بدلًا من جعل IWorker واجهة ضخمة، نقوم بتقسيمها إلى واجهتين أصغر:

✅ تصميم صحيح باستخدام مبدأ ISP

// واجهة للعمل فقط
public interface IWorkable
{
    void Work();
}

// واجهة للأكل فقط
public interface IEatable
{
    void Eat();
}


🔹 الآن، كل كلاس يطبق فقط الواجهة التي يحتاجها:

// العامل البشري يحتاج إلى العمل والأكل
public class HumanWorker : IWorkable, IEatable
{
    public void Work()
    {
        Console.WriteLine("Human is working...");
    }

    public void Eat()
    {
        Console.WriteLine("Human is eating...");
    }
}

// الروبوت يحتاج إلى العمل فقط
public class RobotWorker : IWorkable
{
    public void Work()
    {
        Console.WriteLine("Robot is working...");
    }
}


//==========================================================================================================================================
//==========================================================================================================================================

📌 فوائد تطبيق مبدأ ISP :

✅ 1. تجنب إجبار الفئات على تنفيذ وظائف لا تحتاجها

الفئات تقوم فقط بتنفيذ الوظائف الضرورية لها.
✅ 2. تحسين الصيانة والتطوير

إذا احتجنا إلى تعديل وظيفة معينة، فإننا نعدل فقط الواجهة والفئات المرتبطة بها، دون التأثير على الفئات الأخرى.
✅ 3. تقليل التعقيد في الكود

كل كلاس يستخدم فقط الواجهة التي يحتاجها، مما يجعل الكود أكثر وضوحًا وتنظيمًا.
✅ 4. تعزيز إعادة الاستخدام

يمكننا استخدام نفس الواجهات في مشاريع مختلفة بسهولة، دون الحاجة إلى تنفيذ وظائف غير ضرورية.


//==========================================================================================================================================
//==========================================================================================================================================

📌 القاعدة الذهبية لمبدأ فصل الواجهات (ISP) :

"اجعل الواجهات صغيرة ومحددة، بحيث تحتوي كل واجهة على مجموعة وظائف مترابطة فقط، ولا تجبر الفئات على تنفيذ وظائف لا تحتاجها."

✍ بتطبيق هذا المبدأ، نحصل على كود أكثر مرونة، وقابلية أفضل للتطوير والصيانة. 🚀