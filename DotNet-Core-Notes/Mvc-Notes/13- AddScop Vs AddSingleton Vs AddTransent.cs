1. AddTransient :
-----------------
التعريف: يتم إنشاء نسخة جديدة من الخدمة في كل مرة يتم طلبها من حاوية الاعتماديات (Dependency Injection Container).

مثال: إذا طلبت الخدمة 10 مرات في نفس الطلب، سيتم إنشاء 10 نسخ مختلفة.

services.AddTransient<IMyService, MyService>();  // Transient

//---------------------------------------------------------------------------------------------------------------

2. AddScoped :
--------------
التعريف: يتم إنشاء نسخة واحدة من الخدمة لكل طلب HTTP (أو لكل نطاق عمل). يتم مشاركة نفس النسخة خلال نفس الطلب.

مثال: إذا طلبت الخدمة 10 مرات في نفس الطلب، سيتم استخدام نفس النسخة.

services.AddScoped<IMyService, MyService>();    // Scoped

//---------------------------------------------------------------------------------------------------------------

3. AddSingleton :
-----------------
التعريف: يتم إنشاء نسخة واحدة من الخدمة طوال عمر التطبيق. يتم مشاركة نفس النسخة بين جميع الطلبات والمستخدمين.

مثال: إذا طلبت الخدمة في أي وقت خلال تشغيل التطبيق، سيتم استخدام نفس النسخة.

services.AddSingleton<IMyService, MyService>(); // Singleton

//=========================================================================================================================


النوع				النوع	دورة الحياة							متى تُستخدم؟									متى يتم التخلص منه؟
Transient	نسخة جديدة في كل مرة يتم طلبها	لخدمات مستقلة بدون حالة (مثل أدوات مساعدة)			           عند إغلاق التطبيق
Scoped		نسخة واحدة لكل طلب HTTP			لخدمات تعتمد على حالة الطلب (مثل قواعد البيانات)					عند انتهاء الطلب
Singleton	نسخة واحدة طوال عمر التطبيق		لخدمات مشتركة بين جميع الطلبات (مثل التخزين المؤقت)				فور انتهاء الاستخدام

//---------------------------------------------------------------------------------------------------------------

مثال بسيط:

Transient: مثل استئجار سيارة جديدة في كل مرة تحتاجها.

Scoped: مثل استئجار سيارة واحدة لكل رحلة (طلب HTTP).

Singleton: مثل امتلاك سيارة واحدة تستخدمها طوال الوقت.


