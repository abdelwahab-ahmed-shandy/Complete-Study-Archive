/// Many To Many :

// ุดุฑุญ ุนูุงูุฉ Many to Many ูู ููุงุนุฏ ุงูุจูุงูุงุช
// ุนูุงูุฉ Many to Many (ูุชุนุฏุฏ ุฅูู ูุชุนุฏุฏ) ูู ููุน ูู ุงูุนูุงูุงุช ุจูู ุงูุฌุฏุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ุญูุซ ูููู ููู ุณุฌู ูู ุงูุฌุฏูู ุงูุฃูู ุฃู ูููู ูุฑุชุจุทูุง ุจุนุฏุฉ ุณุฌูุงุช ูู ุงูุฌุฏูู ุงูุซุงููุ ูุงูุนูุณ ุตุญูุญ.

//=================================================================================================================================

// ๐ ูุซุงู ุนููู

// ุงูุณููุงุฑูู:
// ูููุชุฑุถ ุฃู ูุฏููุง ูุงุนุฏุฉ ุจูุงูุงุช ูููุชุจุฉุ ููุฏููุง ุฌุฏูููู:
// ุฌุฏูู "ุงููุคูููู" (Authors): ูุญุชูู ุนูู ูุนูููุงุช ุนู ุงููุคูููู.
// ุฌุฏูู "ุงููุชุจ" (Books): ูุญุชูู ุนูู ุงููุชุจ ุงูุชู ูุชุจูุง ุงููุคูููู.

// ุงููุงุนุฏุฉ:
// ูููู ููุคูู ูุงุญุฏ ุฃู ููุชุจ ุนุฏุฉ ูุชุจ.
// ููููู ููุชุงุจ ูุงุญุฏ ุฃู ูููู ูู ุฃูุซุฑ ูู ูุคูู.
// ูุฐุง ูุนูู ุฃู ุงูุนูุงูุฉ ุจูู Authors ู Books ูู Many to Many.

//=================================================================================================================================

// ููููุฉ ุชูุซูู ุงูุนูุงูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ูุญุชุงุฌ ุฅูู ุฌุฏูู ูุณูุท (Join Table) ูุณูู "AuthorBook" ูุชุฎุฒูู ุงูุนูุงูุฉ.

// ุงูููุงู ุงูุฃูู:
public class Author
{
    public int AuthorID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Name { get; set; }
    public ICollection<AuthorBook> AuthorBooks { get; set; } = new List<AuthorBook>(); // ุนูุงูุฉ Many-To-Many
}

// ุงูููุงู ุงูุซุงูู:
public class Book
{
    public int BookID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Title { get; set; }
    public ICollection<AuthorBook> AuthorBooks { get; set; } = new List<AuthorBook>(); // ุนูุงูุฉ Many-To-Many
}

// ุงูุฌุฏูู ุงููุณูุท:
public class AuthorBook
{
    public int AuthorID { get; set; }  // ููุชุงุญ ุฎุงุฑุฌู
    public Author Author { get; set; }
    public int BookID { get; set; }  // ููุชุงุญ ุฎุงุฑุฌู
    public Book Book { get; set; }
}

//=================================================================================================================================

// ุชูููู ุงูุนูุงูุฉ ุจุงุณุชุฎุฏุงู Fluent API:

public class LibraryContext : DbContext
{
    public DbSet<Author> Authors { get; set; }
    public DbSet<Book> Books { get; set; }
    public DbSet<AuthorBook> AuthorBooks { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=LibraryDB;Trusted_Connection=True;");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuthorBook>()
            .HasKey(ab => new { ab.AuthorID, ab.BookID }); // ุชุนููู ููุชุงุญ ูุฑูุจ

        modelBuilder.Entity<AuthorBook>()
            .HasOne(ab => ab.Author)
            .WithMany(a => a.AuthorBooks)
            .HasForeignKey(ab => ab.AuthorID);

        modelBuilder.Entity<AuthorBook>()
            .HasOne(ab => ab.Book)
            .WithMany(b => b.AuthorBooks)
            .HasForeignKey(ab => ab.BookID);
    }
}

//=================================================================================================================================

// ุฅุฏุฎุงู ุจูุงูุงุช ูุงุฎุชุจุงุฑ ุงูุนูุงูุฉ:
using (var context = new LibraryContext())
{
    var author1 = new Author { Name = "ูุฌูุจ ูุญููุธ" };
    var author2 = new Author { Name = "ุทู ุญุณูู" };

    var book1 = new Book { Title = "ุงูุซูุงุซูุฉ" };
    var book2 = new Book { Title = "ุงูุฃูุงู" };

    var authorBook1 = new AuthorBook { Author = author1, Book = book1 };
    var authorBook2 = new AuthorBook { Author = author1, Book = book2 };
    var authorBook3 = new AuthorBook { Author = author2, Book = book2 };

    context.Authors.AddRange(author1, author2);
    context.Books.AddRange(book1, book2);
    context.AuthorBooks.AddRange(authorBook1, authorBook2, authorBook3);
    context.SaveChanges();
}

//=================================================================================================================================

// ุฌูุจ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู Include:
using (var context = new LibraryContext())
{
    var authorsWithBooks = context.Authors.Include(a => a.AuthorBooks).ThenInclude(ab => ab.Book).ToList();

    foreach (var author in authorsWithBooks)
    {
        Console.WriteLine($"โ๏ธ ุงููุคูู: {author.Name}");
        foreach (var authorBook in author.AuthorBooks)
        {
            Console.WriteLine($"   ๐ ุงููุชุงุจ: {authorBook.Book.Title}");
        }
    }
}