/// One To One :

// ุดุฑุญ ุนูุงูุฉ One To One ูู ููุงุนุฏ ุงูุจูุงูุงุช
// ุนูุงูุฉ One to One (ูุงุญุฏ ุฅูู ูุงุญุฏ) ูู ููุน ูู ุงูุนูุงูุงุช ุจูู ุงูุฌุฏุงูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ุญูุซ ูููู ููู ุณุฌู ูู ุงูุฌุฏูู ุงูุฃูู ุงุฑุชุจุงุท ุจุณุฌู ูุงุญุฏ ููุท ูู ุงูุฌุฏูู ุงูุซุงููุ ูุงูุนูุณ ุตุญูุญ.

//=================================================================================================================================

// ๐ ูุซุงู ุนููู

// ุงูุณููุงุฑูู:
// ูููุชุฑุถ ุฃู ูุฏููุง ูุงุนุฏุฉ ุจูุงูุงุช ูููุชุจุฉุ ููุฏููุง ุฌุฏูููู:
// ุฌุฏูู "ุงููุคูููู" (Authors): ูุญุชูู ุนูู ูุนูููุงุช ุนู ุงููุคูููู.
// ุฌุฏูู "ุงูุณูุฑ ุงูุฐุงุชูุฉ" (AuthorDetails): ูุญุชูู ุนูู ูุนูููุงุช ุชูุตูููุฉ ุนู ุงููุคูููู.

// ุงููุงุนุฏุฉ:
// ูู ูุคูู ูุฏูู ุณูุฑุฉ ุฐุงุชูุฉ ูุงุญุฏุฉ ููุท.
// ููู ุณูุฑุฉ ุฐุงุชูุฉ ูุฑุชุจุทุฉ ุจูุคูู ูุงุญุฏ ููุท.
// ูุฐุง ูุนูู ุฃู ุงูุนูุงูุฉ ุจูู Authors ู AuthorDetails ูู One to One.

//=================================================================================================================================

// ููููุฉ ุชูุซูู ุงูุนูุงูุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุชุ
// ุจุงุณุชุฎุฏุงู ุงูููุงุชูุญ ุงูุฃุณุงุณูุฉ (Primary Key) ูุงูููุชุงุญ ุงูุฎุงุฑุฌู (Foreign Key)

// One :
public class Author
{
    public int AuthorID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Name { get; set; }
    public AuthorDetails AuthorDetails { get; set; } // ุนูุงูุฉ One-To-One
}

// One :
public class AuthorDetails
{
    public int AuthorDetailsID { get; set; }  // ููุชุงุญ ุฃุณุงุณู
    public string Biography { get; set; }
    public int AuthorID { get; set; }  // ููุชุงุญ ุฎุงุฑุฌู ูุฑุจุท ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ ุจุงููุคูู
    public Author Author { get; set; } // ุฎุตูุตุฉ ุงูุชููู
}

//=================================================================================================================================

// ุชูููู ุงูุนูุงูุฉ ุจุงุณุชุฎุฏุงู Fluent API:

public class LibraryContext : DbContext
{
    public DbSet<Author> Authors { get; set; }
    public DbSet<AuthorDetails> AuthorDetails { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=.;Database=LibraryDB;Trusted_Connection=True;");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Author>()
            .HasOne(a => a.AuthorDetails)  // ููู ูุคูู ุณูุฑุฉ ุฐุงุชูุฉ ูุงุญุฏุฉ
            .WithOne(ad => ad.Author) // ููู ุณูุฑุฉ ุฐุงุชูุฉ ูุคูู ูุงุญุฏ
            .HasForeignKey<AuthorDetails>(ad => ad.AuthorID); // ุงูููุชุงุญ ุงูุฎุงุฑุฌู
    }
}

//=================================================================================================================================

// ุฅุฏุฎุงู ุจูุงูุงุช ูุงุฎุชุจุงุฑ ุงูุนูุงูุฉ:
using (var context = new LibraryContext())
{
    var author = new Author { Name = "ูุฌูุจ ูุญููุธ" };
    var authorDetails = new AuthorDetails { Biography = "ุฃุญุฏ ุฃูู ุงูุฃุฏุจุงุก ุงูุนุฑุจ", Author = author };

    context.Authors.Add(author);
    context.AuthorDetails.Add(authorDetails);
    context.SaveChanges();
}

//=================================================================================================================================

// ุฌูุจ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู Include:
using (var context = new LibraryContext())
{
    var authorsWithDetails = context.Authors.Include(a => a.AuthorDetails).ToList();

    foreach (var author in authorsWithDetails)
    {
        Console.WriteLine($"โ๏ธ ุงููุคูู: {author.Name}");
        Console.WriteLine($"   ๐ ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ: {author.AuthorDetails.Biography}");
    }
}
